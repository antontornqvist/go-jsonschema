// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import "fmt"
import "reflect"

type UniqueItems struct {
	// MyStringArray corresponds to the JSON schema field "myStringArray".
	MyStringArray []string `json:"myStringArray,omitempty" yaml:"myStringArray,omitempty" mapstructure:"myStringArray,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UniqueItems) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain UniqueItems
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	var unique []interface{}
	for i := range plain.MyStringArray {
		v := &plain.MyStringArray[i]
		for _, u := range unique {
			if reflect.DeepEqual(v, u) {
				return fmt.Errorf("field %s: items must be unique", "myStringArray")
			}
		}
		unique = append(unique, v)
	}
	*j = UniqueItems(plain)
	return nil
}
